# Put here all helper functions for your zsh

# a simple function to `cd` and `ls`
function cs () {
    cd "$@" && ls -A
}

# Alternatively, if a default is required, it could be aliased instead to:
#   function chpwd() {
#       emulate -L zsh
#       ls
#   }

# Recursively updates all git repositories in a directory.
# Taken from
#   http://blog.sdbarker.com/pro-tip-recursively-updating-all-git-repositories-in-a-directory
function gitall() {
    W=`pwd`
    for i in $(find . -name .git)
    do
        D=$i
        D=${D%/*}
        cd $W/$D
        pwd
        git pull --ff-only
    done
    cd $W
}

# Outputs a random number using Cliff Random Number Generator
#   @see: http://mathworld.wolfram.com/CliffRandomNumberGenerator.html
# TODO: add args parsing for defining ranges.
#   eg:
#       cliff_rand 10 => rand [0..10]
#       cliff_rand 10 -h => rand [1..10] # human readable
#       cliff_rand 1..4 => rand [1..4]
#
function cliff_rand() {
    zmodload zsh/mathfunc
    seed=0.1
    (( seed = 100 * log(seed) ))
    (( number = fmod(seed, 1.0) ))
    (( cliff_number = fabs(number) ))
    print $cliff_number
}

# Optionally:
# alias cliff=cliff_rand

# returns a random number between 1..z
function rand () {
    # if (( $# == 0 ))
    # then echo usage: yp name ...; fi
    # $[RANDOM % $1 + 1]
    echo $RANDOM
}

# Outputs a random password consisting of the chars on the `chars` array.
# TODO: fixed length for now.
#
function randpass() {
  zmodload -i zsh/mathfunc

  length=13 # Max possible value are equal to size of $chars.
  chars="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!?:^~@#$%&*_+=[]/"

  while (( i++ < length ))
  do
    random=$((1 + int(${(c)#chars} * rand48())))
    password+="$chars[$random]"
    chars[$random]=""
  done

  print "$password"
}

# EOF
